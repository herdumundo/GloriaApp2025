package com.gloria.data.repository

import com.gloria.data.model.ArticuloLote
import com.gloria.util.ConnectionOracle
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.catch
import java.sql.PreparedStatement
import java.sql.ResultSet
import java.sql.Statement
import android.util.Log

class ArticuloLoteRepository {
    
    suspend fun getArticulosLotes(
        subgruposSeleccionados: List<Pair<Int, Int>>, // (grupCodigo, sugrCodigo)
        sucursal: Int,
        deposito: Int,
        area: Int,
        departamento: Int,
        seccion: Int,
        familia: String,
        isFamiliaTodos: Boolean = false,
        onProgressUpdate: ((current: Int, total: Int) -> Unit)? = null
    ): Flow<List<ArticuloLote>> = flow {
        Log.d("ArticuloLoteRepository", "üéØ M√âTODO getArticulosLotes() LLAMADO")
        Log.d("ArticuloLoteRepository", "üìû Llamada desde ViewModel recibida")
        val articulosLotes = mutableListOf<ArticuloLote>()
        var connection: java.sql.Connection? = null
        var statement: PreparedStatement? = null
        var resultSet: ResultSet? = null
        
        try {
            Log.d("ArticuloLoteRepository", "üîÑ INICIANDO consulta Oracle...")
            Log.d("ArticuloLoteRepository", "üìä Par√°metros: suc=$sucursal, dep=$deposito, area=$area, dpto=$departamento, secc=$seccion, flia=$familia, isFamiliaTodos=$isFamiliaTodos")
            
            // Obtener conexi√≥n a Oracle
            Log.d("ArticuloLoteRepository", "üîå Obteniendo conexi√≥n a Oracle...")
            connection = ConnectionOracle.getConnection()
            if (connection == null) {
                Log.e("ArticuloLoteRepository", "‚ùå No se pudo establecer conexi√≥n a Oracle")
                emit(articulosLotes)
                return@flow
            }
            Log.d("ArticuloLoteRepository", "‚úÖ Conexi√≥n a Oracle establecida exitosamente")
            
            // Configurar timeout de conexi√≥n para evitar que se cuelgue
            // Nota: setNetworkTimeout no est√° disponible en esta versi√≥n de JDBC
            // Usaremos solo el timeout del statement
            
            // Preparar variables para la consulta
            val subgruposPlaceholders = if (!isFamiliaTodos) {
                subgruposSeleccionados.joinToString(",") { "'${it.first}#${it.second}'" }
            } else ""
            
            val gruposCodigos = if (!isFamiliaTodos) {
                subgruposSeleccionados.map { it.first }.distinct().joinToString(",")
            } else ""
            
            // Construir la consulta SQL seg√∫n si es familia todos o no
            val sql = if (isFamiliaTodos) {
                """
                SELECT  
                    CONCAT(CONCAT(grup_codigo, '#'),SUGR_CODIGO) as concatID,
                    TO_NUMBER (arde_cant_act) as cantidad, 
                    TO_CHAR(arde_fec_vto_lote,'DD-MM-YYYY') as vencimiento, 
                    flia_codigo, GRUP_CODIGO, GRUP_desc, flia_desc, art_desc, 
                    arde_lote, art_codigo, ARDE_FEC_VTO_LOTE, sugr_codigo, sugr_desc
                FROM ADCS.v_web_articulos_clasificacion 
                WHERE arde_suc=? and arde_dep=? and area_codigo=? 
                    and dpto_codigo=? and secc_codigo=?
                ORDER BY flia_desc, GRUP_desc, sugr_desc, art_desc ASC
                """.trimIndent()
            } else {
                """
                SELECT  
                    CONCAT(CONCAT(grup_codigo, '#'),SUGR_CODIGO) as concatID,
                    TO_NUMBER (arde_cant_act) as cantidad, 
                    TO_CHAR(arde_fec_vto_lote,'DD-MM-YYYY') as vencimiento, 
                    flia_codigo, GRUP_CODIGO, GRUP_desc, flia_desc, art_desc, 
                    arde_lote, art_codigo, ARDE_FEC_VTO_LOTE, sugr_codigo, sugr_desc
                FROM ADCS.v_web_articulos_clasificacion 
                WHERE CONCAT(CONCAT(grup_codigo, '#'),SUGR_CODIGO) in ($subgruposPlaceholders)
                    and arde_suc=? and arde_dep=? and area_codigo=? 
                    and dpto_codigo=? and secc_codigo=? 
                    and grup_codigo in ($gruposCodigos) and flia_codigo=?
                ORDER BY flia_desc, GRUP_desc, sugr_desc, art_desc ASC
                """.trimIndent()
            }
            
            Log.d("ArticuloLoteRepository", "üìù SQL Query construida:")
            Log.d("ArticuloLoteRepository", sql)
            
            // Preparar y ejecutar la consulta seg√∫n el tipo de consulta
            Log.d("ArticuloLoteRepository", "üîß Preparando statement...")
            statement = connection.prepareStatement(sql)
            
            // Configurar timeout de statement para evitar consultas infinitas
            statement.setQueryTimeout(30) // 30 segundos
            Log.d("ArticuloLoteRepository", "‚è±Ô∏è Timeout configurado: 30 segundos")
            
            if (isFamiliaTodos) {
                // Consulta sin filtro de grupo/subgrupo ni familia (5 par√°metros)
                Log.d("ArticuloLoteRepository", "üî¢ Configurando 5 par√°metros para consulta 'Todas las familias'")
                statement.setInt(1, sucursal)
                statement.setInt(2, deposito)
                statement.setInt(3, area)
                statement.setInt(4, departamento)
                statement.setInt(5, seccion)
            } else {
                // Consulta con filtro de grupo/subgrupo y familia (6 par√°metros)
                Log.d("ArticuloLoteRepository", "üî¢ Configurando 6 par√°metros para consulta espec√≠fica")
                statement.setInt(1, sucursal)
                statement.setInt(2, deposito)
                statement.setInt(3, area)
                statement.setInt(4, departamento)
                statement.setInt(5, seccion)
                statement.setString(6, familia)
            }
            
            // üîç PRIMERO: Obtener el conteo total de registros
            Log.d("ArticuloLoteRepository", "üìä Obteniendo conteo total de registros...")
            
            // Crear consulta COUNT para obtener el total real
            val sqlCount = if (isFamiliaTodos) {
                """
                SELECT COUNT(*) as total FROM ADCS.v_web_articulos_clasificacion 
                WHERE arde_suc=? and arde_dep=? and area_codigo=? 
                and dpto_codigo=? and secc_codigo=?
                """.trimIndent()
            } else {
                """
                SELECT COUNT(*) as total FROM ADCS.v_web_articulos_clasificacion 
                WHERE arde_suc=? and arde_dep=? and area_codigo=? 
                and dpto_codigo=? and secc_codigo=? 
                and grup_codigo in ($gruposCodigos) and flia_codigo=?
                """.trimIndent()
            }
            
            val countStatement = connection.prepareStatement(sqlCount)
            countStatement.setQueryTimeout(30)
            
            if (isFamiliaTodos) {
                countStatement.setInt(1, sucursal)
                countStatement.setInt(2, deposito)
                countStatement.setInt(3, area)
                countStatement.setInt(4, departamento)
                countStatement.setInt(5, seccion)
            } else {
                countStatement.setInt(1, sucursal)
                countStatement.setInt(2, deposito)
                countStatement.setInt(3, area)
                countStatement.setInt(4, departamento)
                countStatement.setInt(5, seccion)
                countStatement.setString(6, familia)
            }
            
            val countResultSet = countStatement.executeQuery()
            countResultSet.next()
            val totalRegistros = countResultSet.getInt("total")
            countResultSet.close()
            countStatement.close()
            
            Log.d("ArticuloLoteRepository", "üìä Total de registros encontrados: $totalRegistros")
            
            // üîÑ SEGUNDO: Ejecutar consulta principal para procesar
            Log.d("ArticuloLoteRepository", "üöÄ Ejecutando consulta principal para procesar registros...")
            resultSet = statement.executeQuery()
            Log.d("ArticuloLoteRepository", "‚úÖ Consulta ejecutada exitosamente, procesando resultados...")
            
            // Notificar progreso inicial
            onProgressUpdate?.invoke(0, totalRegistros)
            
            // Contador para monitorear el progreso
            var contador = 0
            Log.d("ArticuloLoteRepository", "üìä Procesando $totalRegistros registros con progreso real...")
            
            // Mapear TODOS los resultados con progreso real
            while (resultSet.next()) {
                try {
                    val articulo = ArticuloLote(
                        concatID = resultSet.getString("concatID") ?: "",
                        cantidad = resultSet.getDouble("cantidad"),
                        vencimiento = resultSet.getString("vencimiento") ?: "",
                        fliaCodigo = resultSet.getString("flia_codigo") ?: "",
                        grupCodigo = resultSet.getInt("grup_codigo"),
                        grupDesc = resultSet.getString("grup_desc") ?: "",
                        fliaDesc = resultSet.getString("flia_desc") ?: "",
                        artDesc = resultSet.getString("art_desc") ?: "",
                        ardeLote = resultSet.getString("arde_lote") ?: "",
                        artCodigo = resultSet.getString("art_codigo") ?: "",
                        ardeFecVtoLote = resultSet.getString("arde_fec_vto_lote") ?: "",
                        sugrCodigo = resultSet.getInt("sugr_codigo"),
                        sugrDesc = resultSet.getString("sugr_desc") ?: ""
                    )
                    articulosLotes.add(articulo)
                    contador++
                    
                    // Log de progreso cada 100 registros
                    if (contador % 100 == 0) {
                        Log.d("ArticuloLoteRepository", "üìà Progreso: $contador/$totalRegistros registros procesados...")
                        // Notificar progreso real al ViewModel
                        onProgressUpdate?.invoke(contador, totalRegistros)
                    }
                    
                } catch (e: Exception) {
                    Log.e("ArticuloLoteRepository", "‚ùå Error al mapear art√≠culo: ${e.message}", e)
                    // Continuar con el siguiente art√≠culo
                }
            }
            
            // Notificar progreso final con total real
            onProgressUpdate?.invoke(contador, totalRegistros)
            
            Log.d("ArticuloLoteRepository", "üéØ PROCESAMIENTO COMPLETADO:")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Total de registros encontrados: $totalRegistros")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Total de registros procesados: $contador")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Art√≠culos mapeados exitosamente: ${articulosLotes.size}")
            
            Log.d("ArticuloLoteRepository", "üì§ Enviando ${articulosLotes.size} art√≠culos al ViewModel...")
            
            // Enviar los resultados al ViewModel
            emit(articulosLotes)
            Log.d("ArticuloLoteRepository", "‚úÖ Art√≠culos enviados exitosamente al ViewModel")
            
        } catch (e: Exception) {
            // Verificar si es un aborto normal del Flow (no es un error real)
            if (e.message?.contains("Flow was aborted") == true) {
                Log.d("ArticuloLoteRepository", "‚ÑπÔ∏è Flow abortado normalmente por .first() - esto es esperado")
            } else {
                Log.e("ArticuloLoteRepository", "üí• ERROR CR√çTICO en consulta Oracle: ${e.message}", e)
                Log.e("ArticuloLoteRepository", "üí• Stack trace completo:", e)
            }
            // ‚ùå NO emitir en catch - esto viola la transparencia del Flow
            // Los errores se manejan en el ViewModel
        } finally {
            // Cerrar recursos
            Log.d("ArticuloLoteRepository", "üßπ Cerrando recursos de base de datos...")
            try {
                resultSet?.close()
                statement?.close()
                connection?.close()
                Log.d("ArticuloLoteRepository", "‚úÖ Recursos cerrados exitosamente")
            } catch (e: Exception) {
                Log.e("ArticuloLoteRepository", "‚ùå Error al cerrar recursos: ${e.message}")
            }
        }
    }
    
    /**
     * Inserta la cabecera del inventario en Oracle y retorna el ID generado
     */
    suspend fun insertarCabeceraInventario(
        sucursal: Int,
        deposito: Int,
        area: Int,
        departamento: Int,
        seccion: Int,
        familia: String?,
        subgruposSeleccionados: List<Pair<Int, Int>>,
        isFamiliaTodos: Boolean,
        userdb: String,
        inventarioVisible: Boolean
    ): Int {
        var connection: java.sql.Connection? = null
        var statement: PreparedStatement? = null
        var resultSet: ResultSet? = null
        
        try {
            Log.d("ArticuloLoteRepository", "üöÄ Iniciando inserci√≥n de cabecera del inventario...")
            
            // Conectar a Oracle
            connection = ConnectionOracle.getConnection()
            if (connection == null) {
                throw Exception("No se pudo establecer conexi√≥n a Oracle")
            }
            Log.d("ArticuloLoteRepository", "‚úÖ Conexi√≥n Oracle establecida")
            
            // üîç PRIMERO: Obtener el siguiente ID de la secuencia
            Log.d("ArticuloLoteRepository", "üîç Obteniendo siguiente ID de la secuencia SEQ_NRO_INV...")
            
            val sqlSecuencia = "SELECT SEQ_NRO_INV.NEXTVAL FROM DUAL"
            statement = connection.prepareStatement(sqlSecuencia)
            statement.setQueryTimeout(30)
            
            resultSet = statement.executeQuery()
            resultSet.next()
            val idCabecera = resultSet.getInt(1)
            resultSet.close()
            statement.close()
            
            Log.d("ArticuloLoteRepository", "‚úÖ ID de cabecera obtenido: $idCabecera")
            
            // üîÑ SEGUNDO: Preparar los valores para la inserci√≥n
            val idGrupo = if (!isFamiliaTodos && subgruposSeleccionados.isNotEmpty()) {
                subgruposSeleccionados.first().first.toString()
            } else ""
            
            val idFamilia = if (!isFamiliaTodos && familia != null) familia else ""
            
            val gruposParcial = if (!isFamiliaTodos && subgruposSeleccionados.isNotEmpty()) {
                subgruposSeleccionados.map { it.first }.distinct().joinToString(",")
            } else ""
            
            Log.d("ArticuloLoteRepository", "üìä Valores preparados para inserci√≥n:")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ ID Cabecera: $idCabecera")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ ID Grupo: '$idGrupo'")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ ID Familia: '$idFamilia'")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Grupos Parcial: '$gruposParcial'")
            
            // üöÄ TERCERO: Insertar la cabecera
            val sqlInsert = """
                INSERT INTO ADCS.WEB_INVENTARIO(
                    WINVE_SUC,                          
                    WINVE_DEP,                       
                    WINVE_GRUPO,                 
                    WINVE_FEC,       
                    WINVE_LOGIN,
                    WINVE_TIPO_TOMA,                    
                    WINVE_SECC,                      
                    WINVE_AREA,                  
                    WINVE_DPTO,      
                    WINVE_FLIA,
                    WINVE_IND_LOTE,
                    WINVE_ESTADO,
                    WINVE_ART_EST,
                    WINVE_ART_EXIST,
                    WINVE_CANT_TOMA,
                    WINVE_EMPR,
                    WINVE_NUMERO,
                    WINVE_ESTADO_WEB,
                    WINVE_CONSOLIDADO,
                    WINVE_GRUPO_PARCIAL,
                    WINVE_STOCK_VISIBLE,
                ) VALUES (?, ?, ?, CURRENT_TIMESTAMP, ?, 'M', ?, ?, ?, ?, 'S', 'A', 'S', 'N', '1', '1', ?, 'A', 'N', ?, ?)
            """.trimIndent()
            
            Log.d("ArticuloLoteRepository", "üìù SQL INSERT preparado:")
            Log.d("ArticuloLoteRepository", sqlInsert)
            
            statement = connection.prepareStatement(sqlInsert)
            statement.setQueryTimeout(30)
            
            // Configurar par√°metros
            statement.setInt(1, sucursal)
            statement.setInt(2, deposito)
            statement.setString(3, idGrupo)
            statement.setString(4, userdb.uppercase())
            statement.setInt(5, seccion)
            statement.setInt(6, area)
            statement.setInt(7, departamento)
            statement.setString(8, idFamilia)
            statement.setInt(9, idCabecera)
            statement.setString(10, gruposParcial)
            statement.setString(11, if (inventarioVisible) "Y" else "N")
            
            Log.d("ArticuloLoteRepository", "üî¢ Par√°metros configurados:")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Sucursal: $sucursal")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Dep√≥sito: $deposito")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Grupo: '$idGrupo'")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Usuario: ${userdb.uppercase()}")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Secci√≥n: $seccion")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ √Årea: $area")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Departamento: $departamento")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Familia: '$idFamilia'")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ N√∫mero: $idCabecera")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Grupos Parcial: '$gruposParcial'")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Inventario Visible: ${if (inventarioVisible) "Y" else "N"}")
            
            // Ejecutar inserci√≥n
            val filasInsertadas = statement.executeUpdate()
            
            if (filasInsertadas == 1) {
                Log.d("ArticuloLoteRepository", "‚úÖ Cabecera del inventario insertada exitosamente")
                Log.d("ArticuloLoteRepository", "üéØ ID de cabecera generado: $idCabecera")
                
                // Confirmar transacci√≥n
                connection!!.commit()
                Log.d("ArticuloLoteRepository", "‚úÖ Transacci√≥n confirmada")
                
                return idCabecera
            } else {
                throw Exception("Error al insertar cabecera: se insertaron $filasInsertadas filas en lugar de 1")
            }
            
        } catch (e: Exception) {
            Log.e("ArticuloLoteRepository", "üí• ERROR al insertar cabecera del inventario: ${e.message}", e)
            
            // Revertir transacci√≥n en caso de error
            try {
                connection?.rollback()
                Log.d("ArticuloLoteRepository", "üîÑ Transacci√≥n revertida por error")
            } catch (rollbackError: Exception) {
                Log.e("ArticuloLoteRepository", "‚ùå Error al revertir transacci√≥n: ${rollbackError.message}")
            }
            
            throw e
        } finally {
            // Cerrar recursos
            Log.d("ArticuloLoteRepository", "üßπ Cerrando recursos de inserci√≥n...")
            try {
                resultSet?.close()
                statement?.close()
                connection?.close()
                Log.d("ArticuloLoteRepository", "‚úÖ Recursos de inserci√≥n cerrados exitosamente")
            } catch (e: Exception) {
                Log.e("ArticuloLoteRepository", "‚ùå Error al cerrar recursos de inserci√≥n: ${e.message}")
            }
        }
    }
    
    /**
     * Inserta el detalle del inventario en Oracle
     */
    suspend fun insertarDetalleInventario(
        idCabecera: Int,
        articulosSeleccionados: List<ArticuloLote>,
        sucursal: Int,
        deposito: Int,
        area: Int,
        departamento: Int,
        seccion: Int,
        onProgressUpdate: ((current: Int, total: Int) -> Unit)? = null
    ): Int {
        var connection: java.sql.Connection? = null
        var statement: PreparedStatement? = null
        
        try {
            Log.d("ArticuloLoteRepository", "üöÄ Iniciando inserci√≥n de detalle del inventario...")
            Log.d("ArticuloLoteRepository", "üìä Total de art√≠culos a insertar: ${articulosSeleccionados.size}")
            
            // Conectar a Oracle
            connection = ConnectionOracle.getConnection()
            if (connection == null) {
                throw Exception("No se pudo establecer conexi√≥n a Oracle")
            }
            Log.d("ArticuloLoteRepository", "‚úÖ Conexi√≥n Oracle establecida")
            
            // Preparar la consulta SQL para el detalle
            val sqlInsertDetalle = """
                INSERT INTO ADCS.WEB_INVENTARIO_DET (
                    WINVD_NRO_INV,
                    WINVD_ART,
                    WINVD_SECU,
                    WINVD_CANT_ACT,
                    WINVD_CANT_INV,
                    WINVD_UBIC,
                    WINVD_CODIGO_BARRA,
                    WINVD_CANT_PED_RECEP,
                    WINVD_LOTE,
                    WINVD_FEC_VTO,
                    WINVD_LOTE_CLAVE,
                    WINVD_UM,
                    WINVD_AREA,
                    WINVD_DPTO,
                    WINVD_SECC,
                    WINVD_FLIA,
                    WINVD_GRUPO,
                    WINVD_SUBGR,
                    WINVD_INDIV,
                    WINVD_CONSOLIDADO
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, TO_DATE(?, 'DD-MM-YYYY'), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """.trimIndent()
            
            Log.d("ArticuloLoteRepository", "üìù SQL INSERT detalle preparado:")
            Log.d("ArticuloLoteRepository", sqlInsertDetalle)
            
            statement = connection.prepareStatement(sqlInsertDetalle)
            statement.setQueryTimeout(30)
            
            var secuencia = 1
            var totalInsertados = 0
            
            // Insertar cada art√≠culo con su secuencia
            for (articulo in articulosSeleccionados) {
                try {
                    // Configurar par√°metros para cada art√≠culo
                    statement.setInt(1, idCabecera)                    // WINVD_NRO_INV
                    statement.setString(2, articulo.artCodigo)           // WINVD_ART
                    statement.setInt(3, secuencia)                       // WINVD_SECU
                    statement.setDouble(4, articulo.cantidad)            // WINVD_CANT_ACT
                    statement.setString(5, "")                           // WINVD_CANT_INV (vac√≠o)
                    statement.setString(6, "")                           // WINVD_UBIC (vac√≠o)
                    statement.setString(7, "")                           // WINVD_CODIGO_BARRA (vac√≠o)
                    statement.setString(8, "")                           // WINVD_CANT_PED_RECEP (vac√≠o)
                    statement.setString(9, articulo.ardeLote)            // WINVD_LOTE
                    
                    // Convertir fecha de vencimiento al formato correcto
                    val fechaVto = if (articulo.vencimiento.isNotEmpty()) {
                        articulo.vencimiento // Formato: DD-MM-YYYY
                    } else {
                        "31-12-5000" // Fecha por defecto si no hay vencimiento
                    }
                    statement.setString(10, fechaVto)                    // WINVD_FEC_VTO
                    
                    statement.setString(11, "")                          // WINVD_LOTE_CLAVE (vac√≠o)
                    statement.setString(12, "")                          // WINVD_UM (vac√≠o)
                    statement.setInt(13, area)                           // WINVD_AREA
                    statement.setInt(14, departamento)                   // WINVD_DPTO
                    statement.setInt(15, seccion)                        // WINVD_SECC
                    statement.setString(16, articulo.fliaCodigo)         // WINVD_FLIA
                    statement.setInt(17, articulo.grupCodigo)            // WINVD_GRUPO
                    statement.setInt(18, articulo.sugrCodigo)            // WINVD_SUBGR
                    statement.setString(19, "")                          // WINVD_INDIV (vac√≠o)
                    statement.setString(20, "N")                         // WINVD_CONSOLIDADO
                    
                    // Ejecutar inserci√≥n
                    val filasInsertadas = statement.executeUpdate()
                    
                    if (filasInsertadas == 1) {
                        totalInsertados++
                        Log.d("ArticuloLoteRepository", "‚úÖ Art√≠culo insertado: ${articulo.artDesc} (Secuencia: $secuencia)")
                    } else {
                        Log.w("ArticuloLoteRepository", "‚ö†Ô∏è Error al insertar art√≠culo: ${articulo.artDesc}")
                    }
                    
                    // Incrementar secuencia para el siguiente art√≠culo
                    secuencia++
                    
                    // Notificar progreso cada 10 art√≠culos
                    if (totalInsertados % 10 == 0) {
                        onProgressUpdate?.invoke(totalInsertados, articulosSeleccionados.size)
                        Log.d("ArticuloLoteRepository", "üìà Progreso detalle: $totalInsertados/${articulosSeleccionados.size} art√≠culos insertados...")
                    }
                    
                } catch (e: Exception) {
                    Log.e("ArticuloLoteRepository", "‚ùå Error al insertar art√≠culo ${articulo.artDesc}: ${e.message}", e)
                    // Continuar con el siguiente art√≠culo
                }
            }
            
            // Notificar progreso final
            onProgressUpdate?.invoke(totalInsertados, articulosSeleccionados.size)
            
            Log.d("ArticuloLoteRepository", "üéØ DETALLE DEL INVENTARIO COMPLETADO:")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Total de art√≠culos procesados: ${articulosSeleccionados.size}")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Total de art√≠culos insertados exitosamente: $totalInsertados")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Secuencia final: ${secuencia - 1}")
            
            // Confirmar transacci√≥n
            connection!!.commit()
            Log.d("ArticuloLoteRepository", "‚úÖ Transacci√≥n de detalle confirmada")
            
            return totalInsertados
            
        } catch (e: Exception) {
            Log.e("ArticuloLoteRepository", "üí• ERROR al insertar detalle del inventario: ${e.message}", e)
            
            // Revertir transacci√≥n en caso de error
            try {
                connection?.rollback()
                Log.d("ArticuloLoteRepository", "üîÑ Transacci√≥n de detalle revertida por error")
            } catch (rollbackError: Exception) {
                Log.e("ArticuloLoteRepository", "‚ùå Error al revertir transacci√≥n de detalle: ${rollbackError.message}")
            }
            
            throw e
        } finally {
            // Cerrar recursos
            Log.d("ArticuloLoteRepository", "üßπ Cerrando recursos de detalle...")
            try {
                statement?.close()
                connection?.close()
                Log.d("ArticuloLoteRepository", "‚úÖ Recursos de detalle cerrados exitosamente")
            } catch (e: Exception) {
                Log.e("ArticuloLoteRepository", "‚ùå Error al cerrar recursos de detalle: ${e.message}")
            }
        }
    }
    
    /**
     * Inserta la cabecera y detalle del inventario en una sola transacci√≥n
     * Garantiza integridad de datos: si falla el detalle, se revierte la cabecera
     */
    suspend fun insertarCabeceraYDetalleInventario(
        sucursal: Int,
        deposito: Int,
        area: Int,
        departamento: Int,
        seccion: Int,
        familia: String?,
        subgruposSeleccionados: List<Pair<Int, Int>>,
        isFamiliaTodos: Boolean,
        userdb: String,
        inventarioVisible: Boolean,
        articulosSeleccionados: List<ArticuloLote>,
        onProgressUpdate: ((current: Int, total: Int) -> Unit)? = null
    ): Pair<Int, Int> {
        var connection: java.sql.Connection? = null
        var statement: PreparedStatement? = null
        var resultSet: ResultSet? = null
        
        try {
            Log.d("ArticuloLoteRepository", "üöÄ Iniciando inserci√≥n de cabecera y detalle en transacci√≥n √∫nica...")
            
            // Conectar a Oracle
            connection = ConnectionOracle.getConnection()
            if (connection == null) {
                throw Exception("No se pudo establecer conexi√≥n a Oracle")
            }
            
            // Desactivar auto-commit para manejar transacciones manualmente
            connection.autoCommit = false
            Log.d("ArticuloLoteRepository", "‚úÖ Conexi√≥n Oracle establecida con transacci√≥n manual")
            
            // üîç PRIMERO: Obtener el siguiente ID de la secuencia
            Log.d("ArticuloLoteRepository", "üîç Obteniendo siguiente ID de la secuencia SEQ_NRO_INV...")
            
            val sqlSecuencia = "SELECT SEQ_NRO_INV.NEXTVAL FROM DUAL"
            statement = connection.prepareStatement(sqlSecuencia)
            statement.setQueryTimeout(30)
            
            resultSet = statement.executeQuery()
            resultSet.next()
            val idCabecera = resultSet.getInt(1)
            resultSet.close()
            statement.close()
            
            Log.d("ArticuloLoteRepository", "‚úÖ ID de cabecera obtenido: $idCabecera")
            
            // üîÑ SEGUNDO: Preparar los valores para la inserci√≥n de cabecera
            val idGrupo = if (!isFamiliaTodos && subgruposSeleccionados.isNotEmpty()) {
                subgruposSeleccionados.first().first.toString()
            } else ""
            
            val idFamilia = if (!isFamiliaTodos && familia != null) familia else ""
            
            val gruposParcial = if (!isFamiliaTodos && subgruposSeleccionados.isNotEmpty()) {
                subgruposSeleccionados.map { it.first }.distinct().joinToString(",")
            } else ""
            
            Log.d("ArticuloLoteRepository", "üìä Valores preparados para inserci√≥n de cabecera:")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ ID Cabecera: $idCabecera")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ ID Grupo: '$idGrupo'")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ ID Familia: '$idFamilia'")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Grupos Parcial: '$gruposParcial'")
            
            // üöÄ TERCERO: Insertar la cabecera
            val sqlInsertCabecera = """
                INSERT INTO ADCS.WEB_INVENTARIO(
                    WINVE_SUC,                          
                    WINVE_DEP,                       
                    WINVE_GRUPO,                 
                    WINVE_FEC,       
                    WINVE_LOGIN,
                    WINVE_TIPO_TOMA,                    
                    WINVE_SECC,                      
                    WINVE_AREA,                  
                    WINVE_DPTO,      
                    WINVE_FLIA,
                    WINVE_IND_LOTE,
                    WINVE_ESTADO,
                    WINVE_ART_EST,
                    WINVE_ART_EXIST,
                    WINVE_CANT_TOMA,
                    WINVE_EMPR,
                    WINVE_NUMERO,
                    WINVE_ESTADO_WEB,
                    WINVE_CONSOLIDADO,
                    WINVE_GRUPO_PARCIAL,
                    WINVE_STOCK_VISIBLE
                ) VALUES (?, ?, ?, CURRENT_TIMESTAMP, ?, 'M', ?, ?, ?, ?, 'S', 'A', 'S', 'N', '1', '1', ?, 'A', 'N', ?, ?)
            """.trimIndent()
            
            Log.d("ArticuloLoteRepository", "üìù SQL INSERT cabecera preparado:")
            Log.d("ArticuloLoteRepository", sqlInsertCabecera)
            
            statement = connection.prepareStatement(sqlInsertCabecera)
            statement.setQueryTimeout(30)
            
            // Configurar par√°metros de cabecera
            statement.setInt(1, sucursal)
            statement.setInt(2, deposito)
            statement.setString(3, idGrupo)
            statement.setString(4, userdb.uppercase())
            statement.setInt(5, seccion)
            statement.setInt(6, area)
            statement.setInt(7, departamento)
            statement.setString(8, idFamilia)
            statement.setInt(9, idCabecera)
            statement.setString(10, gruposParcial)
            statement.setString(11, if (inventarioVisible) "Y" else "N")
            
            Log.d("ArticuloLoteRepository", "üî¢ Par√°metros de cabecera configurados:")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Sucursal: $sucursal")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Dep√≥sito: $deposito")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Grupo: '$idGrupo'")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Usuario: ${userdb.uppercase()}")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Secci√≥n: $seccion")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ √Årea: $area")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Departamento: $departamento")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Familia: '$idFamilia'")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ N√∫mero: $idCabecera")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Grupos Parcial: '$gruposParcial'")
            Log.d("ArticuloLoteRepository", "   ‚Ä¢ Inventario Visible: ${if (inventarioVisible) "Y" else "N"}")
            
            // Ejecutar inserci√≥n de cabecera
            val filasInsertadasCabecera = statement.executeUpdate()
            
            if (filasInsertadasCabecera != 1) {
                throw Exception("Error al insertar cabecera: se insertaron $filasInsertadasCabecera filas en lugar de 1")
            }
            
            Log.d("ArticuloLoteRepository", "‚úÖ Cabecera del inventario insertada exitosamente")
            Log.d("ArticuloLoteRepository", "üéØ ID de cabecera generado: $idCabecera")
            
            // üîÑ CUARTO: Insertar el detalle
            Log.d("ArticuloLoteRepository", "üöÄ Iniciando inserci√≥n de detalle del inventario...")
            Log.d("ArticuloLoteRepository", "üìä Total de art√≠culos a insertar: ${articulosSeleccionados.size}")
            
            // Preparar la consulta SQL para el detalle
            val sqlInsertDetalle = """
                INSERT INTO ADCS.WEB_INVENTARIO_DET (
                    WINVD_NRO_INV,
                    WINVD_ART,
                    WINVD_SECU,
                    WINVD_CANT_ACT,
                    WINVD_CANT_INV,
                    WINVD_UBIC,
                    WINVD_CODIGO_BARRA,
                    WINVD_CANT_PED_RECEP,
                    WINVD_LOTE,
                    WINVD_FEC_VTO,
                    WINVD_LOTE_CLAVE,
                    WINVD_UM,
                    WINVD_AREA,
                    WINVD_DPTO,
                    WINVD_SECC,
                    WINVD_FLIA,
                    WINVD_GRUPO,
                    WINVD_SUBGR,
                    WINVD_INDIV,
                    WINVD_CONSOLIDADO
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, TO_DATE(?, 'DD-MM-YYYY'), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """.trimIndent()
            
            Log.d("ArticuloLoteRepository", "üìù SQL INSERT detalle preparado:")
            Log.d("ArticuloLoteRepository", sqlInsertDetalle)
            
            statement = connection.prepareStatement(sqlInsertDetalle)
            statement.setQueryTimeout(30)
            
            var secuencia = 1
            var totalInsertados = 0
            
            // Insertar cada art√≠culo con su secuencia
            for (articulo in articulosSeleccionados) {
                try {
                    // Configurar par√°metros para cada art√≠culo
                    statement.setInt(1, idCabecera)                    // WINVD_NRO_INV
                    statement.setString(2, articulo.artCodigo)           // WINVD_ART
                    statement.setInt(3, secuencia)                       // WINVD_SECU
                    statement.setDouble(4, articulo.cantidad)            // WINVD_CANT_ACT
                    statement.setString(5, "")                           // WINVD_CANT_INV (vac√≠o)
                    statement.setString(6, "")                           // WINVD_UBIC (vac√≠o)
                    statement.setString(7, "")                           // WINVD_CODIGO_BARRA (vac√≠o)
                    statement.setString(8, "")                           // WINVD_CANT_PED_RECEP (vac√≠o)
                    statement.setString(9, articulo.ardeLote)            // WINVD_LOTE
                    
                    // Convertir fecha de vencimiento al formato correcto
                    val fechaVto = if (articulo.vencimiento.isNotEmpty()) {
                        articulo.vencimiento // Formato: DD-MM-YYYY
                    } else {
                        "31-12-5000" // Fecha por defecto si no hay vencimiento
                    }
                    statement.setString(10, fechaVto)                    // WINVD_FEC_VTO
                    
                    statement.setString(11, "")                          // WINVD_LOTE_CLAVE (vac√≠o)
                    statement.setString(12, "")                          // WINVD_UM (vac√≠o)
                    statement.setInt(13, area)                           // WINVD_AREA
                    statement.setInt(14, departamento)                   // WINVD_DPTO
                    statement.setInt(15, seccion)                        // WINVD_SECC
                    statement.setString(16, articulo.fliaCodigo)         // WINVD_FLIA
                    statement.setInt(17, articulo.grupCodigo)            // WINVD_GRUPO
                    statement.setInt(18, articulo.sugrCodigo)            // WINVD_SUBGR
                    statement.setString(19, "")                          // WINVD_INDIV (vac√≠o)
                    statement.setString(20, "N")                         // WINVD_CONSOLIDADO
                    
                    // Ejecutar inserci√≥n
                    val filasInsertadas = statement.executeUpdate()
                    
                    if (filasInsertadas == 1) {
                        totalInsertados++
                        Log.d("ArticuloLoteRepository", "‚úÖ Art√≠culo insertado: ${articulo.artDesc} (Secuencia: $secuencia)")
                    } else {
                        Log.w("ArticuloLoteRepository", "‚ö†Ô∏è Error al insertar art√≠culo: ${articulo.artDesc}")
                    }
                    
                    // Incrementar secuencia para el siguiente art√≠culo
                    secuencia++
                    
                    // Notificar progreso cada 10 art√≠culos
                    if (totalInsertados % 10 == 0) {
                        onProgressUpdate?.invoke(totalInsertados, articulosSeleccionados.size)
                        Log.d("ArticuloLoteRepository", "üìà Progreso detalle: $totalInsertados/${articulosSeleccionados.size} art√≠culos insertados...")
                    }
                    
                } catch (e: Exception) {
                    Log.e("ArticuloLoteRepository", "‚ùå Error al insertar art√≠culo ${articulo.artDesc}: ${e.message}", e)
                    // Continuar con el siguiente art√≠culo
                }
            }
            
            // Notificar progreso final
            onProgressUpdate?.invoke(totalInsertados, articulosSeleccionados.size)
            
            Log.d("ArticuloLoteRepository", "üéØ DETALLE DEL INVENTARIO COMPLETADO:")
            Log.d("ArticuloLoteRepository", "üìä Total de art√≠culos procesados: ${articulosSeleccionados.size}")
            Log.d("ArticuloLoteRepository", "üìä Total de art√≠culos insertados exitosamente: $totalInsertados")
            Log.d("ArticuloLoteRepository", "üìä Secuencia final: ${secuencia - 1}")
            
            // ‚úÖ CONFIRMAR TRANSACCI√ìN COMPLETA
            connection.commit()
            Log.d("ArticuloLoteRepository", "‚úÖ TRANSACCI√ìN COMPLETA CONFIRMADA (Cabecera + Detalle)")
            
            return Pair(idCabecera, totalInsertados)
            
        } catch (e: Exception) {
            Log.e("ArticuloLoteRepository", "üí• ERROR en transacci√≥n completa: ${e.message}", e)
            
            // üîÑ REVERTIR TRANSACCI√ìN COMPLETA en caso de error
            try {
                connection?.rollback()
                Log.d("ArticuloLoteRepository", "üîÑ TRANSACCI√ìN COMPLETA REVERTIDA por error")
            } catch (rollbackError: Exception) {
                Log.e("ArticuloLoteRepository", "‚ùå Error al revertir transacci√≥n completa: ${rollbackError.message}")
            }
            
            throw e
        } finally {
            // Cerrar recursos
            Log.d("ArticuloLoteRepository", "üßπ Cerrando recursos de transacci√≥n completa...")
            try {
                resultSet?.close()
                statement?.close()
                connection?.close()
                Log.d("ArticuloLoteRepository", "‚úÖ Recursos de transacci√≥n completa cerrados exitosamente")
            } catch (e: Exception) {
                Log.e("ArticuloLoteRepository", "‚ùå Error al cerrar recursos de transacci√≥n completa: ${e.message}")
            }
        }
    }
}
